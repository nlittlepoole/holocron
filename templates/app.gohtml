<html>
<body>
<form name="app">
    <table border="1" width="100%">
        <tr>
            <th>{{.Prompt}}</th>
            <td><input name="r" placeholder="Response"/></td>
            <th>Encrypted</th>
            <td><input name="ec" placeholder="Encrypted"/></td>
            <th>Treasure</th>
            <td><input name="t" placeholder="Treasure"/></td>
        </tr>
    </table>
    <input type="button" name="ecb" value="Encrypt Message"/>
    <input type="button" name="rb" value="Reveal Treasure"/>
</form>

<script type="text/javascript">
var app = document.forms.app,
    elem = app.elements;

elem.ec.value = `{{.Encrypted}}`;
elem.t.value = `{{.Treasure}}`;

const s = new Uint8Array(16); //window.crypto.getRandomValues(new Uint8Array(16));
const e = new TextEncoder();
const d = new TextDecoder();

const sbtl = window.crypto.subtle;
const iv = new Uint8Array(12); // window.crypto.getRandomValues(new Uint8Array(12));
const algorithm = {
    iv,
    name: 'AES-GCM',
};

function _base64ToArrayBuffer(b64) {
    var bs = window.atob(b64);
    var len = bs.length;
    var bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = bs.charCodeAt(i);
    }
    return bytes.buffer;
};

async function getKey(input) {
    const keyMaterial = await sbtl.importKey(
      "raw",
      e.encode(input), {
        name: "PBKDF2"
      },
      false, ["deriveBits", "deriveKey"]
    );
    return await sbtl.deriveKey({
        "name": "PBKDF2",
        salt: s,
        "iterations": 100000,
        "hash": "SHA-256"
        },
        keyMaterial, {
        "name": "AES-GCM",
        "length": 256
        },
        true, ["encrypt", "decrypt"]
    );
}

elem.ecb.onclick = async function(){
    let key = await getKey(elem.r.value);
    const msg = e.encode(elem.t.value);
    const messageEncryptedUTF8 = await sbtl.encrypt(
        algorithm,
        key,
        msg,
    );
    elem.ec.value = btoa(String.fromCharCode.apply(null, new Uint8Array(messageEncryptedUTF8)));
    
};
elem.rb.onclick = async function(){
    let key = await getKey(elem.r.value);
    const msg = await sbtl.decrypt(
        algorithm,
        key,
        _base64ToArrayBuffer(elem.ec.value),
    );
    elem.t.value = d.decode(msg);
}
</script>
</body>
</html>